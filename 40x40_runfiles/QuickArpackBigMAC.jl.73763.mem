  1651294 module QuickArpackBigMAC
        - include("./Gershgorin.jl")
        - include("./SpectralLanczos.jl")
        - 
        - using LinearAlgebra, SparseArrays, PyCall, Arpack
        - using .Gershgorin, .SpectralLanczos
        - 
        - export estimate_eHOMO, kBT_arpack_MAC, LUMO_arpack_MAC
        - 
        - 
        - function estimate_eHOMO(H,eps_loose)
        -     N = size(H,1)
        - 
        -     # * Step 1: Roughly estimate where HOMO energy is
        -     λmin, λmax = spectral_bounds(H)
        -     println("λmin = $λmin")
        -     println("λmax = $λmax")
        -     eL_guess = 0.5 * (λmin + λmax) # initial guess is the middle of the spectrum
        -     nvals, eL_guess = count_evals(H, eL_guess,-1e-9) #use negative eps_shift to avoid missing HOMO
        - 
        -     # Define some useful constants
        -     Rspectrum = λmax - λmin
        -     ugs = Rspectrum/N #unit guess shift
        -     n0 = 1 + Int(N/2) #number of levels STRICTLY under HOMO 
        -     δN = nvals - n0
        -     
        -     # This approach might be too coarse... might never converge
        -     while abs(δN) > 0.1 * N #if our initial guess of HOMO energy is way off
        -         eL_guess = eL_guess - ugs * δN
        -         nvals, eL_guess = count_evals(H,eL_guess,-1e-9)
        -         δN = nvals - n0
        -     end
        - 
        -     # Here, we run an under-converged Lanczos to get a finer estimate of eHOMO.
        -     # This will tell us what sigma to choose when running the actual Lanczos
        -     while δN != 0
        -         println("δN1 = $δN")
        -         if δN > 0 #overerestimated eHOMO
        -             elanczos, nconv, _, _, _ = eigs(H,nev=δN,which=:SR,sigma=eL_guess,ritzvec=false,tol=eps_loose,check=1)
        -             sort!(elanczos)
        -             eL_guess = elanczos[1]
        -         
        -         elseif δN < 0 #understimated eHOMO
        -             elanczos, nconv, _, _, _ = eigs(H,nev=-δN,which=:LR,sigma=eL_guess,ritzvec=false,tol=eps_loose,check=1)
        -             sort!(elanczos)
        -             eL_guess = elanczos[end]
        -         end
        -         nvals, eL_guess = count_evals(H,eL_guess,-1e-9)
        -         δN = nvals - n0
        -         println("δN2 = $δN")
        -     end
        -     println("δN final = $δN")
        -     return eL_guess, Rspectrum
        - end
        - 
        - function check_δN(H,ε)
        -     N = size(H,1)
        -     ntarget = Int(N/2) #nb of MOs below LUMO
        -     nvals = size(ε,1)
        -     n = 0
        -     δN = 1
        -     while (δN != 0) && (n < nvals)
        -         n+=1 
        -         println("ε[$n] = $(ε[n])")
        -         δN = count_evals(sparse(H),ε[n])[1] - ntarget
        -         println("n = $n\t δN = $δN")
        -         if δN > 0
        -             println("δN = $δN > 0; exiting now n =$n (<----- should be 1)")
        -             break
        -         end
        -     end
        -     return δN, n
        - end
        - 
        - function kBT_arpack_MAC(H,eHOMO_guess,T=300.0,eps_lanczos=2e-7)
        -     N = size(H,1)
        -     kB = 8.617e-5 #eV/K
        -     emax = eHOMO_guess + 1.5 * kB * T
        -     nvals, _ = count_evals(H,emax)
        -     nev_req = nvals - Int(floor(N/2)) 
        -     println("Number of requested eigenvalues =  $(nev_req)")
        -     ε,ψ, _, _, _, _ = eigs(H,nev=nev_req,sigma=eHOMO_guess-1e-8,which=:LR,maxiter=10000,tol=eps_lanczos)
        -     return ε,ψ
        - end
        - 
        - function LUMO_arpack_MAC(H, eHOMO_guess, Rspectrum; eps_lanczos=1e-9, nvals=4) #Rspectrum = spectral range of H; obtained in `estimate_eHOMO` above (from Gershgorin circle thm)
        -     N = size(H,1)
        -     ugs = Rspectrum/(2*N) #This unit step value is smaller than in `estimate_eHOMO` bc we expect |δN| < 1 (the estimate of HOMO should be quite already; no need to go too crazy with the reshifts)
        -     ε,ψ, _, _, _, _ = eigs(H,nev=nvals,sigma=eHOMO_guess-2 *ugs,which=:LM,maxiter=10000,tol=eps_lanczos) #take look for eigenvalues near energies decently lower than the eHOMO estimate to avoid missing HOMO and to get HOMO
        -     δN, iLUMO = check_δN(H,ε)
        -     ntries = 1
        -     while δN != 0 
        -         println("**** try nb. $ntries; δN = $δN **** ")
        -         if δN > 0
        -             ε0 = ε[1] 
        -         else
        -             ε0 = ε[end] 
        -         end
        -         if ntries % 10 == 0
        -             eHOMO_guess = ε0 - ugs * δN * 20 #if algo is stagnating, give it a big kick every 10 steps
        -         else
        -             eHOMO_guess = ε0 - ugs * δN
        -         end
        -         ε,ψ, _, _, _, _ = eigs(H,nev=nvals,sigma=eHOMO_guess-ugs,which=:LM,maxiter=10000,tol=eps_lanczos)
        -         δN, iLUMO = check_δN(H,ε)
        -         ntries += 1
        -     end
        -     return ε, ψ, iLUMO
        - end
        - 
        - end
